Input,Expected Output,Expected Files
"How do I create a basic MemAgent with OpenAI and MongoDB?","To create a basic MemAgent, you need to: 1) Set up MongoDB configuration with MongoDBConfig(uri='your-uri'), 2) Create MongoDBProvider with the config, 3) Initialize MemAgent with OpenAI model and memory provider. Example: mongodb_config = MongoDBConfig(uri='your-uri'); memory_provider = MongoDBProvider(mongodb_config); agent = MemAgent(model=OpenAI(model='gpt-4'), instruction='You are a helpful assistant.', memory_provider=memory_provider)","README.md,src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/llms/openai.py,examples/memagent_single_agent.ipynb"
"What are the different memory types available in MemoRizz?","MemoRizz supports 9 memory types defined in the MemoryType enum: PERSONAS (agent personalities), TOOLBOX (function definitions), SHORT_TERM_MEMORY (temporary processing), LONG_TERM_MEMORY (persistent knowledge), CONVERSATION_MEMORY (chat history), WORKFLOW_MEMORY (multi-step processes), MEMAGENT (agent configurations), SHARED_MEMORY (multi-agent communication), and SUMMARIES (compressed interaction history).","src/memorizz/memory_provider/memory_type.py,src/memorizz/__init__.py,README.md,src/memorizz/memagent.py,src/memorizz/memory_provider/base.py"
"How do I register a function as a tool in the toolbox?","Use the @toolbox decorator or call toolbox.register_tool(). Example: @toolbox def my_function(param: str) -> str: '''Function description''' return result. The function will be automatically converted to LLM-callable format with proper schema generation from type hints and docstrings.","src/memorizz/toolbox/toolbox.py,src/memorizz/toolbox/tool_schema.py,examples/toolbox.ipynb,README.md,src/memorizz/memagent.py"
"What persona role types are predefined in the system?","MemoRizz provides 5 predefined role types in the RoleType enum: GENERAL (versatile support), ASSISTANT (personal support), CUSTOMER_SUPPORT (issue resolution), TECHNICAL_EXPERT (technical advice), and RESEARCHER (complex analysis). Each has predefined goals and background descriptions.","src/memorizz/persona/role_type.py,src/memorizz/persona/persona.py,examples/persona.ipynb,README.md,src/memorizz/__init__.py"
"How do I set up MongoDB Atlas with vector search for MemoRizz?","You need to: 1) Create MongoDB Atlas cluster, 2) Enable Vector Search, 3) Create database and collection, 4) Get connection string, 5) Use MongoDBConfig(uri='connection-string') and MongoDBProvider(config). The provider automatically handles vector index creation for semantic search.","README.md,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/embeddings/openai.py,examples/memagent_single_agent.ipynb,docs/databases/"
"How does the multi-agent orchestration work?","Multi-agent orchestration uses MultiAgentOrchestrator with shared memory. Create delegates, instantiate orchestrator with root agent and delegates, then execute workflows. Supports both flat and hierarchical coordination with unified shared memory tracking across all agents.","src/memorizz/multi_agent_orchestrator.py,src/memorizz/shared_memory/shared_memory.py,src/memorizz/task_decomposition.py,examples/memagents_multi_agents.ipynb,README.md"
"What application modes are available and how do they work?","Application modes are defined in ApplicationMode enum and control memory type allocation. Each mode has specific memory type configurations via ApplicationModeConfig. The DEFAULT mode provides basic memory setup, while other modes can be customized for specific use cases.","src/memorizz/memory_component/application_mode.py,src/memorizz/memagent.py,src/memorizz/memory_component/memory_component.py,src/memorizz/memory_provider/memory_type.py,README.md"
"How do I add and retrieve long-term memory knowledge?","Use agent.add_long_term_memory(content, namespace) to store knowledge, agent.retrieve_long_term_memory(knowledge_id) to get specific entries, or search semantically. The knowledge base supports CRUD operations and semantic search via vector embeddings.","src/memorizz/long_term_memory/knowledge_base.py,src/memorizz/memagent.py,examples/knowledge_base.ipynb,README.md,src/memorizz/memory_provider/mongodb/provider.py"
"How does the conversation memory component work?","ConversationMemoryComponent manages chat history with roles (USER, ASSISTANT, TOOL). It stores messages with timestamps, supports retrieval by conversation_id, and integrates with the memory provider for persistence across sessions.","src/memorizz/memory_component/conversational_memory_component.py,src/memorizz/memory_component/memory_component.py,src/memorizz/memagent.py,src/memorizz/memory_provider/memory_type.py,examples/memagent_single_agent.ipynb"
"What's the difference between semantic cache and long-term memory?","Semantic cache (in short_term_memory) provides temporary storage for frequently accessed items with semantic similarity matching, while long-term memory offers persistent knowledge storage with CRUD operations. Both use vector embeddings but serve different purposes and lifespans.","src/memorizz/short_term_memory/semantic_cache.py,src/memorizz/long_term_memory/knowledge_base.py,src/memorizz/memory_provider/memory_type.py,README.md,src/memorizz/memagent.py"
"How do I create a custom persona for my agent?","Create a Persona object with name, role (RoleType enum or custom), goals, and background. Use agent.set_persona(persona) to apply it. The persona influences agent behavior and responses according to the defined characteristics.","src/memorizz/persona/persona.py,src/memorizz/persona/role_type.py,examples/persona.ipynb,src/memorizz/memagent.py,README.md"
"How does tool discovery work in the toolbox?","Tools are semantically indexed using embeddings generated from function metadata (name, docstring, parameters). When agents need tools, they search using natural language queries that match against these embeddings to find relevant functions automatically.","src/memorizz/toolbox/toolbox.py,src/memorizz/toolbox/tool_schema.py,src/memorizz/embeddings/openai.py,examples/toolbox.ipynb,README.md"
"What are the required dependencies for MemoRizz?","MemoRizz requires Python 3.7+ with dependencies: openai (LLM integration), pymongo (MongoDB connectivity), langchain_ollama and ollama (local embeddings), and numpy (vector operations). Install via 'pip install memorizz'.","pyproject.toml,README.md,src/memorizz/embeddings/openai.py,src/memorizz/embeddings/ollama.py,src/memorizz/llms/openai.py"
"How do I implement error handling in my MemAgent?","MemAgent includes built-in error handling via try-catch blocks in core methods. You can extend error handling by overriding methods or implementing custom error callbacks. The framework logs errors and provides graceful degradation for memory operations.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/toolbox/toolbox.py,src/memorizz/memory_component/memory_component.py,examples/memagent_single_agent.ipynb"
"How does context window management work?","Context Window Management (CWM) automatically manages token limits by intelligently truncating or summarizing conversation history when approaching model limits. It prioritizes recent interactions and important context while maintaining conversation coherence.","src/memorizz/context_window_management/cwm.py,src/memorizz/memagent.py,src/memorizz/memory_component/summary_component.py,README.md,src/memorizz/memory_provider/memory_type.py"
"What's the workflow memory system and how do I use it?","Workflow memory tracks multi-step processes with WorkflowOutcome objects. Create workflows with unique IDs, store intermediate results, and track completion status. Useful for complex tasks requiring state management across multiple interactions.","src/memorizz/workflow/workflow.py,src/memorizz/memory_provider/memory_type.py,examples/workflow.ipynb,src/memorizz/memagent.py,README.md"
"How do I save and load existing agents?","Use agent.save() to persist agent state to memory provider, and MemAgent.load(agent_id, memory_provider) to restore agents. Agents are stored with their configuration, persona, tools, and memory references for complete state recovery.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/memory_provider/memory_type.py,examples/memagent_single_agent.ipynb,README.md"
"What embedding providers are supported?","MemoRizz supports OpenAI embeddings (text-embedding-3-small/large) and Ollama for local embeddings. OpenAI is used by default for production, while Ollama enables offline/private deployments with models like nomic-embed-text.","src/memorizz/embeddings/openai.py,src/memorizz/embeddings/ollama.py,examples/test-openai-embed.ipynb,examples/test-ollama-embed.ipynb,README.md"
"How do I configure different memory types for my agent?","Override default memory types by passing memory_types list to MemAgent constructor, or use application_mode for predefined configurations. Memory types determine which storage mechanisms are active for different data categories.","src/memorizz/memagent.py,src/memorizz/memory_component/application_mode.py,src/memorizz/memory_provider/memory_type.py,src/memorizz/memory_component/memory_component.py,README.md"
"What's the difference between delegates and shared memory?","Delegates are specialized agents that can be called by a root agent for specific tasks, while shared memory provides a communication channel for multi-agent coordination. Delegates maintain their own memory but can share context via shared memory sessions.","src/memorizz/multi_agent_orchestrator.py,src/memorizz/shared_memory/shared_memory.py,src/memorizz/memagent.py,examples/memagents_multi_agents.ipynb,README.md"
"How do I implement tool access control?","Tool access is controlled via the tool_access parameter ('private' by default). Tools can be private to specific agents or shared across agent instances. This is managed through the toolbox registration and memory provider storage system.","src/memorizz/memagent.py,src/memorizz/toolbox/toolbox.py,src/memorizz/memory_provider/mongodb/provider.py,examples/toolbox.ipynb,README.md"
"What's the schema generation system for tools?","Tool schemas are automatically generated from function signatures using ToolSchemaType. The system analyzes type hints, docstrings, and parameters to create OpenAI function calling compatible schemas with proper validation and descriptions.","src/memorizz/toolbox/tool_schema.py,src/memorizz/toolbox/toolbox.py,examples/toolbox.ipynb,src/memorizz/memagent.py,README.md"
"How does the summary component work for memory management?","The summary component automatically compresses conversation history when memory limits are approached. It creates semantic summaries of past interactions while preserving key information, stored in the SUMMARIES memory type for efficient retrieval.","src/memorizz/memory_component/summary_component.py,src/memorizz/context_window_management/cwm.py,src/memorizz/memory_provider/memory_type.py,src/memorizz/memagent.py,README.md"
"What MongoDB collections does MemoRizz create?","MemoRizz creates collections based on MemoryType enum values: personas, toolbox, short_term_memory, long_term_memory, conversation_memory, workflow_memory, agents, shared_memory, and summaries. Each has specific schemas and vector search indexes.","src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/memory_provider/memory_type.py,src/memorizz/memagent.py,examples/memagent_single_agent.ipynb,README.md"
"How do I handle agent updates and versioning?","Use agent.update() method to modify agent configurations like instruction and max_steps. The system maintains agent state consistency through the memory provider while allowing runtime configuration changes without losing memory context.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,README.md,examples/memagent_single_agent.ipynb,src/memorizz/memory_provider/memory_type.py"
"What's the task decomposition system?","TaskDecomposer breaks complex queries into SubTask objects for multi-agent workflows. It analyzes user requests and creates structured task distributions that can be assigned to different delegate agents based on their capabilities and personas.","src/memorizz/task_decomposition.py,src/memorizz/multi_agent_orchestrator.py,examples/memagents_multi_agents.ipynb,src/memorizz/memagent.py,README.md"
"How do I implement custom memory providers?","Extend the MemoryProvider base class and implement required methods: store(), retrieve_by_query(), delete(), and others. The base class defines the interface that MemAgent expects for memory operations across different storage backends.","src/memorizz/memory_provider/base.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/memory_provider/__init__.py,README.md,src/memorizz/memagent.py"
"What's the role system in conversations?","The Role enum defines conversation participants: USER (human input), ASSISTANT (agent responses), DEVELOPER (system messages), and TOOL (function call results). This ensures proper message attribution and conversation flow tracking.","src/memorizz/memagent.py,src/memorizz/memory_component/conversational_memory_component.py,examples/memagent_single_agent.ipynb,README.md,src/memorizz/memory_provider/memory_type.py"
"How does vector search indexing work?","Vector search indexes are automatically created by MongoDBProvider using embedding dimensions from the configured embedding provider. Indexes support semantic similarity queries across all memory types that store vector embeddings.","src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/embeddings/openai.py,src/memorizz/long_term_memory/knowledge_base.py,README.md,examples/knowledge_base.ipynb"
"What are the configuration constants in MemAgent?","Key constants include DEFAULT_INSTRUCTION ('You are a helpful assistant.'), DEFAULT_MAX_STEPS (20), and DEFAULT_TOOL_ACCESS ('private'). These provide sensible defaults for agent initialization while allowing customization.","src/memorizz/memagent.py,README.md,examples/memagent_single_agent.ipynb,src/memorizz/memory_component/application_mode.py,src/memorizz/toolbox/toolbox.py"
"How do I handle nested multi-agent scenarios?","MultiAgentOrchestrator supports hierarchical coordination where delegate agents can have sub-agents. Use the is_nested_orchestrator flag and shared memory sessions to maintain unified tracking across all agent levels in complex workflows.","src/memorizz/multi_agent_orchestrator.py,src/memorizz/shared_memory/shared_memory.py,examples/memagents_multi_agents.ipynb,src/memorizz/memagent.py,README.md"
"What's the MemAgentModel for?","MemAgentModel is a Pydantic BaseModel that defines the data structure for agent persistence and validation. It includes all agent properties like model, persona, tools, memory references, and configuration settings with proper type validation.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/persona/persona.py,README.md,src/memorizz/memory_provider/memory_type.py"
"How do I delete agents and their associated memories?","Use MemAgent.delete_by_id(agent_id, cascade=True, memory_provider) to remove agents. The cascade parameter determines whether to also delete associated memories across all memory types, providing clean removal or preservation options.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,README.md,src/memorizz/memory_provider/memory_type.py,examples/memagent_single_agent.ipynb"
"What's the database tools configuration system?","MongoDBTools and MongoDBToolsConfig provide database-specific tool management with embedding integration. Configure with mongo_uri, db_name, and get_embedding function to enable semantic tool discovery and storage.","src/memorizz/database/mongodb/mongodb_tools.py,README.md,examples/toolbox.ipynb,src/memorizz/toolbox/toolbox.py,src/memorizz/embeddings/openai.py"
"How does the instruction system work for agents?","Agent instructions define the base behavior and personality. Set via the instruction parameter during MemAgent creation or update with agent.update(). Instructions are combined with persona information to shape agent responses and decision-making.","src/memorizz/memagent.py,README.md,examples/memagent_single_agent.ipynb,src/memorizz/persona/persona.py,examples/persona.ipynb"
"What's the maximum steps configuration?","max_steps controls the maximum number of reasoning/tool-use iterations an agent can perform for a single query. Default is 20 steps. This prevents infinite loops while allowing complex multi-step reasoning and tool chaining.","src/memorizz/memagent.py,README.md,examples/memagent_single_agent.ipynb,src/memorizz/memory_component/application_mode.py,examples/toolbox.ipynb"
"How do I implement conversation threading?","Use conversation_id parameter in agent interactions to maintain separate conversation threads. Each thread has its own conversation memory while sharing long-term knowledge and tools, enabling multi-threaded agent interactions.","src/memorizz/memory_component/conversational_memory_component.py,src/memorizz/memagent.py,examples/memagent_single_agent.ipynb,src/memorizz/memory_provider/memory_type.py,README.md"
"What's the namespace system in long-term memory?","Namespaces organize knowledge entries into logical categories. Use the namespace parameter in add_long_term_memory() to group related information. This enables targeted retrieval and better knowledge organization within the knowledge base.","src/memorizz/long_term_memory/knowledge_base.py,src/memorizz/memagent.py,examples/knowledge_base.ipynb,README.md,src/memorizz/memory_provider/mongodb/provider.py"
"How does the embedding dimension system work?","get_embedding_dimensions() automatically determines vector dimensions from the configured embedding provider. This ensures proper vector index creation and compatibility between different embedding models (OpenAI vs Ollama).","src/memorizz/embeddings/openai.py,src/memorizz/embeddings/ollama.py,src/memorizz/memory_provider/mongodb/provider.py,examples/test-openai-embed.ipynb,examples/test-ollama-embed.ipynb"
"What are the security considerations for MemoRizz?","MemoRizz is experimental and not production-ready. Key concerns include: unaudited code, potential data exposure, MongoDB security configuration, API key management, and input validation. Only use for educational purposes with non-sensitive data.","README.md,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/llms/openai.py,pyproject.toml,LICENCE.txt"
"How do I configure logging in MemoRizz?","MemoRizz uses Python's logging module with loggers in key components. Configure logging level and handlers in your application to control verbosity. Key loggers include memorizz.memagent, memorizz.memory_provider, and memorizz.multi_agent_orchestrator.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/multi_agent_orchestrator.py,src/memorizz/toolbox/toolbox.py,README.md"
"What's the ObjectId system in MongoDB integration?","ObjectId from BSON is used for unique document identification in MongoDB collections. MemoRizz handles ObjectId conversion automatically for agent IDs, memory references, and tool storage, ensuring proper MongoDB document relationships.","src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/memagent.py,src/memorizz/long_term_memory/knowledge_base.py,src/memorizz/toolbox/toolbox.py,examples/knowledge_base.ipynb"
"How do I handle concurrent agent operations?","MultiAgentOrchestrator uses asyncio and concurrent.futures for parallel agent execution. Shared memory provides coordination while maintaining thread safety. Consider MongoDB connection pooling and proper exception handling for production scenarios.","src/memorizz/multi_agent_orchestrator.py,src/memorizz/shared_memory/shared_memory.py,examples/memagents_multi_agents.ipynb,src/memorizz/memory_provider/mongodb/provider.py,README.md"
"What's the tool augmentation feature?","Tool augmentation uses LLM to enhance function docstrings and generate synthetic queries for better semantic discovery. Set augment=True in register_tool() to improve tool findability through expanded metadata and search terms.","src/memorizz/toolbox/toolbox.py,examples/toolbox.ipynb,src/memorizz/embeddings/openai.py,README.md,src/memorizz/memory_provider/mongodb/provider.py"
"How does the persona background system work?","Persona backgrounds provide detailed context about agent expertise and experience. Combined with goals and role type, backgrounds shape how agents approach problems and communicate. Predefined backgrounds exist for each RoleType with customization options.","src/memorizz/persona/persona.py,src/memorizz/persona/role_type.py,examples/persona.ipynb,src/memorizz/memagent.py,README.md"
"What's the conversation memory retrieval system?","Conversation memory supports retrieval by conversation_id, timestamp ranges, and semantic similarity. The system maintains message ordering, role attribution, and context preservation across sessions for coherent conversation continuation.","src/memorizz/memory_component/conversational_memory_component.py,src/memorizz/memory_provider/mongodb/provider.py,examples/memagent_single_agent.ipynb,src/memorizz/memagent.py,README.md"
"How do I implement custom application modes?","Extend ApplicationMode enum and create corresponding ApplicationModeConfig entries that define memory type allocations. Each mode specifies which MemoryType enums are active, enabling specialized agent configurations for different use cases.","src/memorizz/memory_component/application_mode.py,src/memorizz/memagent.py,src/memorizz/memory_provider/memory_type.py,README.md,examples/memagent_single_agent.ipynb"
"What's the agent ID generation system?","Agent IDs are generated using uuid.uuid4() for uniqueness across distributed systems. IDs are stored as strings in MemAgentModel and used for agent persistence, retrieval, and delegation relationships in multi-agent scenarios.","src/memorizz/memagent.py,src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/multi_agent_orchestrator.py,README.md,examples/memagents_multi_agents.ipynb"
"How does the search index model work?","SearchIndexModel from pymongo creates vector search indexes with proper configuration for embedding dimensions and similarity metrics. MemoRizz automatically configures these indexes for each memory type that requires semantic search capabilities.","src/memorizz/memory_provider/mongodb/provider.py,src/memorizz/embeddings/openai.py,src/memorizz/long_term_memory/knowledge_base.py,README.md,examples/knowledge_base.ipynb"
"What's the shared memory session system?","Shared memory sessions enable multi-agent coordination by providing a common workspace ID. Agents can share context, results, and intermediate states within sessions, supporting both flat and hierarchical multi-agent architectures with unified tracking.","src/memorizz/shared_memory/shared_memory.py,src/memorizz/multi_agent_orchestrator.py,examples/memagents_multi_agents.ipynb,src/memorizz/memory_provider/memory_type.py,README.md"
"How do I handle environment variables and API key management?","Set required environment variables: OPENAI_API_KEY for LLM/embeddings, MONGODB_URI for database connection. Optional variables include MONGODB_DB_NAME (defaults to 'memorizz'). Store keys securely and ensure they're accessible to your Python environment before initializing MemoRizz components.","README.md,src/memorizz/llms/openai.py,src/memorizz/embeddings/openai.py,src/memorizz/memory_provider/mongodb/provider.py,examples/memagent_single_agent.ipynb"
